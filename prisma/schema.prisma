generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Shift {
  id        Int      @id @default(autoincrement())
  userId    Int
  name      String   @db.VarChar(255) // 근무조 이름
  color     String   @db.VarChar(50) // 근무조 색상
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Schedule {
  id        Int      @id @default(autoincrement())
  userId    Int
  month     Int // 스케줄이 적용되는 월 (1 ~ 12)
  year      Int // 스케줄이 적용되는 연도
  day1      Int? // 1일에 대한 근무조 ID
  day2      Int? // 2일에 대한 근무조 ID
  day3      Int? // 3일에 대한 근무조 ID
  day4      Int? // 4일에 대한 근무조 ID
  day5      Int? // 5일에 대한 근무조 ID
  day6      Int? // 6일에 대한 근무조 ID
  day7      Int? // 7일에 대한 근무조 ID
  day8      Int? // 8일에 대한 근무조 ID
  day9      Int? // 9일에 대한 근무조 ID
  day10     Int? // 10일에 대한 근무조 ID
  day11     Int? // 11일에 대한 근무조 ID
  day12     Int? // 12일에 대한 근무조 ID
  day13     Int? // 13일에 대한 근무조 ID
  day14     Int? // 14일에 대한 근무조 ID
  day15     Int? // 15일에 대한 근무조 ID
  day16     Int? // 16일에 대한 근무조 ID
  day17     Int? // 17일에 대한 근무조 ID
  day18     Int? // 18일에 대한 근무조 ID
  day19     Int? // 19일에 대한 근무조 ID
  day20     Int? // 20일에 대한 근무조 ID
  day21     Int? // 21일에 대한 근무조 ID
  day22     Int? // 22일에 대한 근무조 ID
  day23     Int? // 23일에 대한 근무조 ID
  day24     Int? // 24일에 대한 근무조 ID
  day25     Int? // 25일에 대한 근무조 ID
  day26     Int? // 26일에 대한 근무조 ID
  day27     Int? // 27일에 대한 근무조 ID
  day28     Int? // 28일에 대한 근무조 ID
  day29     Int? // 29일에 대한 근무조 ID
  day30     Int? // 30일에 대한 근무조 ID
  day31     Int? // 31일에 대한 근무조 ID
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year]) // 동일한 월에 대한 중복 스케줄 방지
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String   @db.Text // 댓글 내용
  createdAt DateTime @default(now()) // 댓글 작성일
  updatedAt DateTime @default(now()) @updatedAt // 댓글 수정일

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
}

model User {
  id              Int       @id @default(autoincrement())
  nickname        String    @db.VarChar(255)
  email           String    @db.VarChar(255)
  authProvider    String    @db.VarChar(50)
  authProviderId  String    @db.VarChar(255)
  profileImageUrl String?   @db.VarChar(255)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt
  deletedAt       DateTime?

  // 관계 정의
  posts      Post[] // 유저가 작성한 게시글 (1:N 관계)
  comments   Comment[] // 유저가 작성한 댓글 (1:N 관계)
  savedPosts Post[]     @relation("SavedPosts") // 유저가 저장한 게시글 (다대다 관계)
  Shift      Shift[] // 유저가 속한 근무조 (1:N 관계)
  Schedule   Schedule[] // 유저가 가진 스케줄 (1:N 관계)

  @@unique([email, authProvider])
}

model Post {
  id        Int       @id @default(autoincrement())
  userId    Int
  title     String    @db.VarChar(255) // 게시글 제목
  content   String    @db.Text // 게시글 내용
  views     Int       @default(0) // 조회수
  likes     Int       @default(0) // 좋아요 수
  createdAt DateTime  @default(now()) // 게시글 작성일
  updatedAt DateTime  @default(now()) @updatedAt // 게시글 수정일
  comments  Comment[] // 댓글 리스트 (1:N 관계)
  files     File[] // 게시글에 첨부된 파일들 (1:N 관계)
  savedBy   User[]    @relation("SavedPosts") // 유저가 저장한 게시글 (다대다 관계)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model File {
  id        Int      @id @default(autoincrement())
  postId    Int // 어떤 게시글의 파일인지
  url       String   @db.VarChar(255) // 파일의 URL 또는 경로
  fileType  String   @db.VarChar(100) // 파일의 MIME 타입 (예: image/png, application/pdf)
  fileSize  Int // 파일의 크기 (바이트 단위)
  createdAt DateTime @default(now()) // 파일 업로드 시간

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
}
